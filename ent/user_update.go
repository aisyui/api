// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"t/ent/card"
	"t/ent/predicate"
	"t/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetDid sets the "did" field.
func (uu *UserUpdate) SetDid(s string) *UserUpdate {
	uu.mutation.SetDid(s)
	return uu
}

// SetNillableDid sets the "did" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDid(s *string) *UserUpdate {
	if s != nil {
		uu.SetDid(*s)
	}
	return uu
}

// ClearDid clears the value of the "did" field.
func (uu *UserUpdate) ClearDid() *UserUpdate {
	uu.mutation.ClearDid()
	return uu
}

// SetMember sets the "member" field.
func (uu *UserUpdate) SetMember(b bool) *UserUpdate {
	uu.mutation.SetMember(b)
	return uu
}

// SetNillableMember sets the "member" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMember(b *bool) *UserUpdate {
	if b != nil {
		uu.SetMember(*b)
	}
	return uu
}

// ClearMember clears the value of the "member" field.
func (uu *UserUpdate) ClearMember() *UserUpdate {
	uu.mutation.ClearMember()
	return uu
}

// SetBook sets the "book" field.
func (uu *UserUpdate) SetBook(b bool) *UserUpdate {
	uu.mutation.SetBook(b)
	return uu
}

// SetNillableBook sets the "book" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBook(b *bool) *UserUpdate {
	if b != nil {
		uu.SetBook(*b)
	}
	return uu
}

// ClearBook clears the value of the "book" field.
func (uu *UserUpdate) ClearBook() *UserUpdate {
	uu.mutation.ClearBook()
	return uu
}

// SetManga sets the "manga" field.
func (uu *UserUpdate) SetManga(b bool) *UserUpdate {
	uu.mutation.SetManga(b)
	return uu
}

// SetNillableManga sets the "manga" field if the given value is not nil.
func (uu *UserUpdate) SetNillableManga(b *bool) *UserUpdate {
	if b != nil {
		uu.SetManga(*b)
	}
	return uu
}

// ClearManga clears the value of the "manga" field.
func (uu *UserUpdate) ClearManga() *UserUpdate {
	uu.mutation.ClearManga()
	return uu
}

// SetBadge sets the "badge" field.
func (uu *UserUpdate) SetBadge(b bool) *UserUpdate {
	uu.mutation.SetBadge(b)
	return uu
}

// SetNillableBadge sets the "badge" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBadge(b *bool) *UserUpdate {
	if b != nil {
		uu.SetBadge(*b)
	}
	return uu
}

// ClearBadge clears the value of the "badge" field.
func (uu *UserUpdate) ClearBadge() *UserUpdate {
	uu.mutation.ClearBadge()
	return uu
}

// SetBsky sets the "bsky" field.
func (uu *UserUpdate) SetBsky(b bool) *UserUpdate {
	uu.mutation.SetBsky(b)
	return uu
}

// SetNillableBsky sets the "bsky" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBsky(b *bool) *UserUpdate {
	if b != nil {
		uu.SetBsky(*b)
	}
	return uu
}

// ClearBsky clears the value of the "bsky" field.
func (uu *UserUpdate) ClearBsky() *UserUpdate {
	uu.mutation.ClearBsky()
	return uu
}

// SetMastodon sets the "mastodon" field.
func (uu *UserUpdate) SetMastodon(b bool) *UserUpdate {
	uu.mutation.SetMastodon(b)
	return uu
}

// SetNillableMastodon sets the "mastodon" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMastodon(b *bool) *UserUpdate {
	if b != nil {
		uu.SetMastodon(*b)
	}
	return uu
}

// ClearMastodon clears the value of the "mastodon" field.
func (uu *UserUpdate) ClearMastodon() *UserUpdate {
	uu.mutation.ClearMastodon()
	return uu
}

// SetDelete sets the "delete" field.
func (uu *UserUpdate) SetDelete(b bool) *UserUpdate {
	uu.mutation.SetDelete(b)
	return uu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDelete(b *bool) *UserUpdate {
	if b != nil {
		uu.SetDelete(*b)
	}
	return uu
}

// ClearDelete clears the value of the "delete" field.
func (uu *UserUpdate) ClearDelete() *UserUpdate {
	uu.mutation.ClearDelete()
	return uu
}

// SetHandle sets the "handle" field.
func (uu *UserUpdate) SetHandle(b bool) *UserUpdate {
	uu.mutation.SetHandle(b)
	return uu
}

// SetNillableHandle sets the "handle" field if the given value is not nil.
func (uu *UserUpdate) SetNillableHandle(b *bool) *UserUpdate {
	if b != nil {
		uu.SetHandle(*b)
	}
	return uu
}

// ClearHandle clears the value of the "handle" field.
func (uu *UserUpdate) ClearHandle() *UserUpdate {
	uu.mutation.ClearHandle()
	return uu
}

// SetToken sets the "token" field.
func (uu *UserUpdate) SetToken(s string) *UserUpdate {
	uu.mutation.SetToken(s)
	return uu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (uu *UserUpdate) SetNillableToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetToken(*s)
	}
	return uu
}

// ClearToken clears the value of the "token" field.
func (uu *UserUpdate) ClearToken() *UserUpdate {
	uu.mutation.ClearToken()
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUpdatedAt(*t)
	}
	return uu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uu *UserUpdate) ClearUpdatedAt() *UserUpdate {
	uu.mutation.ClearUpdatedAt()
	return uu
}

// SetRaidAt sets the "raid_at" field.
func (uu *UserUpdate) SetRaidAt(t time.Time) *UserUpdate {
	uu.mutation.SetRaidAt(t)
	return uu
}

// SetNillableRaidAt sets the "raid_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRaidAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetRaidAt(*t)
	}
	return uu
}

// ClearRaidAt clears the value of the "raid_at" field.
func (uu *UserUpdate) ClearRaidAt() *UserUpdate {
	uu.mutation.ClearRaidAt()
	return uu
}

// SetEggAt sets the "egg_at" field.
func (uu *UserUpdate) SetEggAt(t time.Time) *UserUpdate {
	uu.mutation.SetEggAt(t)
	return uu
}

// SetNillableEggAt sets the "egg_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEggAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetEggAt(*t)
	}
	return uu
}

// ClearEggAt clears the value of the "egg_at" field.
func (uu *UserUpdate) ClearEggAt() *UserUpdate {
	uu.mutation.ClearEggAt()
	return uu
}

// SetLuck sets the "luck" field.
func (uu *UserUpdate) SetLuck(i int) *UserUpdate {
	uu.mutation.ResetLuck()
	uu.mutation.SetLuck(i)
	return uu
}

// SetNillableLuck sets the "luck" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLuck(i *int) *UserUpdate {
	if i != nil {
		uu.SetLuck(*i)
	}
	return uu
}

// AddLuck adds i to the "luck" field.
func (uu *UserUpdate) AddLuck(i int) *UserUpdate {
	uu.mutation.AddLuck(i)
	return uu
}

// ClearLuck clears the value of the "luck" field.
func (uu *UserUpdate) ClearLuck() *UserUpdate {
	uu.mutation.ClearLuck()
	return uu
}

// SetLuckAt sets the "luck_at" field.
func (uu *UserUpdate) SetLuckAt(t time.Time) *UserUpdate {
	uu.mutation.SetLuckAt(t)
	return uu
}

// SetNillableLuckAt sets the "luck_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLuckAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLuckAt(*t)
	}
	return uu
}

// ClearLuckAt clears the value of the "luck_at" field.
func (uu *UserUpdate) ClearLuckAt() *UserUpdate {
	uu.mutation.ClearLuckAt()
	return uu
}

// SetLike sets the "like" field.
func (uu *UserUpdate) SetLike(i int) *UserUpdate {
	uu.mutation.ResetLike()
	uu.mutation.SetLike(i)
	return uu
}

// SetNillableLike sets the "like" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLike(i *int) *UserUpdate {
	if i != nil {
		uu.SetLike(*i)
	}
	return uu
}

// AddLike adds i to the "like" field.
func (uu *UserUpdate) AddLike(i int) *UserUpdate {
	uu.mutation.AddLike(i)
	return uu
}

// ClearLike clears the value of the "like" field.
func (uu *UserUpdate) ClearLike() *UserUpdate {
	uu.mutation.ClearLike()
	return uu
}

// SetLikeRank sets the "like_rank" field.
func (uu *UserUpdate) SetLikeRank(i int) *UserUpdate {
	uu.mutation.ResetLikeRank()
	uu.mutation.SetLikeRank(i)
	return uu
}

// SetNillableLikeRank sets the "like_rank" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLikeRank(i *int) *UserUpdate {
	if i != nil {
		uu.SetLikeRank(*i)
	}
	return uu
}

// AddLikeRank adds i to the "like_rank" field.
func (uu *UserUpdate) AddLikeRank(i int) *UserUpdate {
	uu.mutation.AddLikeRank(i)
	return uu
}

// ClearLikeRank clears the value of the "like_rank" field.
func (uu *UserUpdate) ClearLikeRank() *UserUpdate {
	uu.mutation.ClearLikeRank()
	return uu
}

// SetLikeAt sets the "like_at" field.
func (uu *UserUpdate) SetLikeAt(t time.Time) *UserUpdate {
	uu.mutation.SetLikeAt(t)
	return uu
}

// SetNillableLikeAt sets the "like_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLikeAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLikeAt(*t)
	}
	return uu
}

// ClearLikeAt clears the value of the "like_at" field.
func (uu *UserUpdate) ClearLikeAt() *UserUpdate {
	uu.mutation.ClearLikeAt()
	return uu
}

// SetFav sets the "fav" field.
func (uu *UserUpdate) SetFav(i int) *UserUpdate {
	uu.mutation.ResetFav()
	uu.mutation.SetFav(i)
	return uu
}

// SetNillableFav sets the "fav" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFav(i *int) *UserUpdate {
	if i != nil {
		uu.SetFav(*i)
	}
	return uu
}

// AddFav adds i to the "fav" field.
func (uu *UserUpdate) AddFav(i int) *UserUpdate {
	uu.mutation.AddFav(i)
	return uu
}

// ClearFav clears the value of the "fav" field.
func (uu *UserUpdate) ClearFav() *UserUpdate {
	uu.mutation.ClearFav()
	return uu
}

// SetTen sets the "ten" field.
func (uu *UserUpdate) SetTen(b bool) *UserUpdate {
	uu.mutation.SetTen(b)
	return uu
}

// SetNillableTen sets the "ten" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTen(b *bool) *UserUpdate {
	if b != nil {
		uu.SetTen(*b)
	}
	return uu
}

// ClearTen clears the value of the "ten" field.
func (uu *UserUpdate) ClearTen() *UserUpdate {
	uu.mutation.ClearTen()
	return uu
}

// SetTenSu sets the "ten_su" field.
func (uu *UserUpdate) SetTenSu(i int) *UserUpdate {
	uu.mutation.ResetTenSu()
	uu.mutation.SetTenSu(i)
	return uu
}

// SetNillableTenSu sets the "ten_su" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTenSu(i *int) *UserUpdate {
	if i != nil {
		uu.SetTenSu(*i)
	}
	return uu
}

// AddTenSu adds i to the "ten_su" field.
func (uu *UserUpdate) AddTenSu(i int) *UserUpdate {
	uu.mutation.AddTenSu(i)
	return uu
}

// ClearTenSu clears the value of the "ten_su" field.
func (uu *UserUpdate) ClearTenSu() *UserUpdate {
	uu.mutation.ClearTenSu()
	return uu
}

// SetTenKai sets the "ten_kai" field.
func (uu *UserUpdate) SetTenKai(i int) *UserUpdate {
	uu.mutation.ResetTenKai()
	uu.mutation.SetTenKai(i)
	return uu
}

// SetNillableTenKai sets the "ten_kai" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTenKai(i *int) *UserUpdate {
	if i != nil {
		uu.SetTenKai(*i)
	}
	return uu
}

// AddTenKai adds i to the "ten_kai" field.
func (uu *UserUpdate) AddTenKai(i int) *UserUpdate {
	uu.mutation.AddTenKai(i)
	return uu
}

// ClearTenKai clears the value of the "ten_kai" field.
func (uu *UserUpdate) ClearTenKai() *UserUpdate {
	uu.mutation.ClearTenKai()
	return uu
}

// SetAiten sets the "aiten" field.
func (uu *UserUpdate) SetAiten(i int) *UserUpdate {
	uu.mutation.ResetAiten()
	uu.mutation.SetAiten(i)
	return uu
}

// SetNillableAiten sets the "aiten" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAiten(i *int) *UserUpdate {
	if i != nil {
		uu.SetAiten(*i)
	}
	return uu
}

// AddAiten adds i to the "aiten" field.
func (uu *UserUpdate) AddAiten(i int) *UserUpdate {
	uu.mutation.AddAiten(i)
	return uu
}

// ClearAiten clears the value of the "aiten" field.
func (uu *UserUpdate) ClearAiten() *UserUpdate {
	uu.mutation.ClearAiten()
	return uu
}

// SetTenCard sets the "ten_card" field.
func (uu *UserUpdate) SetTenCard(s string) *UserUpdate {
	uu.mutation.SetTenCard(s)
	return uu
}

// SetNillableTenCard sets the "ten_card" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTenCard(s *string) *UserUpdate {
	if s != nil {
		uu.SetTenCard(*s)
	}
	return uu
}

// ClearTenCard clears the value of the "ten_card" field.
func (uu *UserUpdate) ClearTenCard() *UserUpdate {
	uu.mutation.ClearTenCard()
	return uu
}

// SetTenDelete sets the "ten_delete" field.
func (uu *UserUpdate) SetTenDelete(s string) *UserUpdate {
	uu.mutation.SetTenDelete(s)
	return uu
}

// SetNillableTenDelete sets the "ten_delete" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTenDelete(s *string) *UserUpdate {
	if s != nil {
		uu.SetTenDelete(*s)
	}
	return uu
}

// ClearTenDelete clears the value of the "ten_delete" field.
func (uu *UserUpdate) ClearTenDelete() *UserUpdate {
	uu.mutation.ClearTenDelete()
	return uu
}

// SetTenPost sets the "ten_post" field.
func (uu *UserUpdate) SetTenPost(s string) *UserUpdate {
	uu.mutation.SetTenPost(s)
	return uu
}

// SetNillableTenPost sets the "ten_post" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTenPost(s *string) *UserUpdate {
	if s != nil {
		uu.SetTenPost(*s)
	}
	return uu
}

// ClearTenPost clears the value of the "ten_post" field.
func (uu *UserUpdate) ClearTenPost() *UserUpdate {
	uu.mutation.ClearTenPost()
	return uu
}

// SetTenGet sets the "ten_get" field.
func (uu *UserUpdate) SetTenGet(s string) *UserUpdate {
	uu.mutation.SetTenGet(s)
	return uu
}

// SetNillableTenGet sets the "ten_get" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTenGet(s *string) *UserUpdate {
	if s != nil {
		uu.SetTenGet(*s)
	}
	return uu
}

// ClearTenGet clears the value of the "ten_get" field.
func (uu *UserUpdate) ClearTenGet() *UserUpdate {
	uu.mutation.ClearTenGet()
	return uu
}

// SetTenAt sets the "ten_at" field.
func (uu *UserUpdate) SetTenAt(t time.Time) *UserUpdate {
	uu.mutation.SetTenAt(t)
	return uu
}

// SetNillableTenAt sets the "ten_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTenAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetTenAt(*t)
	}
	return uu
}

// ClearTenAt clears the value of the "ten_at" field.
func (uu *UserUpdate) ClearTenAt() *UserUpdate {
	uu.mutation.ClearTenAt()
	return uu
}

// SetNext sets the "next" field.
func (uu *UserUpdate) SetNext(s string) *UserUpdate {
	uu.mutation.SetNext(s)
	return uu
}

// SetNillableNext sets the "next" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNext(s *string) *UserUpdate {
	if s != nil {
		uu.SetNext(*s)
	}
	return uu
}

// ClearNext clears the value of the "next" field.
func (uu *UserUpdate) ClearNext() *UserUpdate {
	uu.mutation.ClearNext()
	return uu
}

// AddCardIDs adds the "card" edge to the Card entity by IDs.
func (uu *UserUpdate) AddCardIDs(ids ...int) *UserUpdate {
	uu.mutation.AddCardIDs(ids...)
	return uu
}

// AddCard adds the "card" edges to the Card entity.
func (uu *UserUpdate) AddCard(c ...*Card) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCardIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearCard clears all "card" edges to the Card entity.
func (uu *UserUpdate) ClearCard() *UserUpdate {
	uu.mutation.ClearCard()
	return uu
}

// RemoveCardIDs removes the "card" edge to Card entities by IDs.
func (uu *UserUpdate) RemoveCardIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveCardIDs(ids...)
	return uu
}

// RemoveCard removes "card" edges to Card entities.
func (uu *UserUpdate) RemoveCard(c ...*Card) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCardIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserMutation](ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Did(); ok {
		_spec.SetField(user.FieldDid, field.TypeString, value)
	}
	if uu.mutation.DidCleared() {
		_spec.ClearField(user.FieldDid, field.TypeString)
	}
	if value, ok := uu.mutation.Member(); ok {
		_spec.SetField(user.FieldMember, field.TypeBool, value)
	}
	if uu.mutation.MemberCleared() {
		_spec.ClearField(user.FieldMember, field.TypeBool)
	}
	if value, ok := uu.mutation.Book(); ok {
		_spec.SetField(user.FieldBook, field.TypeBool, value)
	}
	if uu.mutation.BookCleared() {
		_spec.ClearField(user.FieldBook, field.TypeBool)
	}
	if value, ok := uu.mutation.Manga(); ok {
		_spec.SetField(user.FieldManga, field.TypeBool, value)
	}
	if uu.mutation.MangaCleared() {
		_spec.ClearField(user.FieldManga, field.TypeBool)
	}
	if value, ok := uu.mutation.Badge(); ok {
		_spec.SetField(user.FieldBadge, field.TypeBool, value)
	}
	if uu.mutation.BadgeCleared() {
		_spec.ClearField(user.FieldBadge, field.TypeBool)
	}
	if value, ok := uu.mutation.Bsky(); ok {
		_spec.SetField(user.FieldBsky, field.TypeBool, value)
	}
	if uu.mutation.BskyCleared() {
		_spec.ClearField(user.FieldBsky, field.TypeBool)
	}
	if value, ok := uu.mutation.Mastodon(); ok {
		_spec.SetField(user.FieldMastodon, field.TypeBool, value)
	}
	if uu.mutation.MastodonCleared() {
		_spec.ClearField(user.FieldMastodon, field.TypeBool)
	}
	if value, ok := uu.mutation.Delete(); ok {
		_spec.SetField(user.FieldDelete, field.TypeBool, value)
	}
	if uu.mutation.DeleteCleared() {
		_spec.ClearField(user.FieldDelete, field.TypeBool)
	}
	if value, ok := uu.mutation.Handle(); ok {
		_spec.SetField(user.FieldHandle, field.TypeBool, value)
	}
	if uu.mutation.HandleCleared() {
		_spec.ClearField(user.FieldHandle, field.TypeBool)
	}
	if value, ok := uu.mutation.Token(); ok {
		_spec.SetField(user.FieldToken, field.TypeString, value)
	}
	if uu.mutation.TokenCleared() {
		_spec.ClearField(user.FieldToken, field.TypeString)
	}
	if uu.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.RaidAt(); ok {
		_spec.SetField(user.FieldRaidAt, field.TypeTime, value)
	}
	if uu.mutation.RaidAtCleared() {
		_spec.ClearField(user.FieldRaidAt, field.TypeTime)
	}
	if value, ok := uu.mutation.EggAt(); ok {
		_spec.SetField(user.FieldEggAt, field.TypeTime, value)
	}
	if uu.mutation.EggAtCleared() {
		_spec.ClearField(user.FieldEggAt, field.TypeTime)
	}
	if value, ok := uu.mutation.Luck(); ok {
		_spec.SetField(user.FieldLuck, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedLuck(); ok {
		_spec.AddField(user.FieldLuck, field.TypeInt, value)
	}
	if uu.mutation.LuckCleared() {
		_spec.ClearField(user.FieldLuck, field.TypeInt)
	}
	if value, ok := uu.mutation.LuckAt(); ok {
		_spec.SetField(user.FieldLuckAt, field.TypeTime, value)
	}
	if uu.mutation.LuckAtCleared() {
		_spec.ClearField(user.FieldLuckAt, field.TypeTime)
	}
	if value, ok := uu.mutation.Like(); ok {
		_spec.SetField(user.FieldLike, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedLike(); ok {
		_spec.AddField(user.FieldLike, field.TypeInt, value)
	}
	if uu.mutation.LikeCleared() {
		_spec.ClearField(user.FieldLike, field.TypeInt)
	}
	if value, ok := uu.mutation.LikeRank(); ok {
		_spec.SetField(user.FieldLikeRank, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedLikeRank(); ok {
		_spec.AddField(user.FieldLikeRank, field.TypeInt, value)
	}
	if uu.mutation.LikeRankCleared() {
		_spec.ClearField(user.FieldLikeRank, field.TypeInt)
	}
	if value, ok := uu.mutation.LikeAt(); ok {
		_spec.SetField(user.FieldLikeAt, field.TypeTime, value)
	}
	if uu.mutation.LikeAtCleared() {
		_spec.ClearField(user.FieldLikeAt, field.TypeTime)
	}
	if value, ok := uu.mutation.Fav(); ok {
		_spec.SetField(user.FieldFav, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedFav(); ok {
		_spec.AddField(user.FieldFav, field.TypeInt, value)
	}
	if uu.mutation.FavCleared() {
		_spec.ClearField(user.FieldFav, field.TypeInt)
	}
	if value, ok := uu.mutation.Ten(); ok {
		_spec.SetField(user.FieldTen, field.TypeBool, value)
	}
	if uu.mutation.TenCleared() {
		_spec.ClearField(user.FieldTen, field.TypeBool)
	}
	if value, ok := uu.mutation.TenSu(); ok {
		_spec.SetField(user.FieldTenSu, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedTenSu(); ok {
		_spec.AddField(user.FieldTenSu, field.TypeInt, value)
	}
	if uu.mutation.TenSuCleared() {
		_spec.ClearField(user.FieldTenSu, field.TypeInt)
	}
	if value, ok := uu.mutation.TenKai(); ok {
		_spec.SetField(user.FieldTenKai, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedTenKai(); ok {
		_spec.AddField(user.FieldTenKai, field.TypeInt, value)
	}
	if uu.mutation.TenKaiCleared() {
		_spec.ClearField(user.FieldTenKai, field.TypeInt)
	}
	if value, ok := uu.mutation.Aiten(); ok {
		_spec.SetField(user.FieldAiten, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedAiten(); ok {
		_spec.AddField(user.FieldAiten, field.TypeInt, value)
	}
	if uu.mutation.AitenCleared() {
		_spec.ClearField(user.FieldAiten, field.TypeInt)
	}
	if value, ok := uu.mutation.TenCard(); ok {
		_spec.SetField(user.FieldTenCard, field.TypeString, value)
	}
	if uu.mutation.TenCardCleared() {
		_spec.ClearField(user.FieldTenCard, field.TypeString)
	}
	if value, ok := uu.mutation.TenDelete(); ok {
		_spec.SetField(user.FieldTenDelete, field.TypeString, value)
	}
	if uu.mutation.TenDeleteCleared() {
		_spec.ClearField(user.FieldTenDelete, field.TypeString)
	}
	if value, ok := uu.mutation.TenPost(); ok {
		_spec.SetField(user.FieldTenPost, field.TypeString, value)
	}
	if uu.mutation.TenPostCleared() {
		_spec.ClearField(user.FieldTenPost, field.TypeString)
	}
	if value, ok := uu.mutation.TenGet(); ok {
		_spec.SetField(user.FieldTenGet, field.TypeString, value)
	}
	if uu.mutation.TenGetCleared() {
		_spec.ClearField(user.FieldTenGet, field.TypeString)
	}
	if value, ok := uu.mutation.TenAt(); ok {
		_spec.SetField(user.FieldTenAt, field.TypeTime, value)
	}
	if uu.mutation.TenAtCleared() {
		_spec.ClearField(user.FieldTenAt, field.TypeTime)
	}
	if value, ok := uu.mutation.Next(); ok {
		_spec.SetField(user.FieldNext, field.TypeString, value)
	}
	if uu.mutation.NextCleared() {
		_spec.ClearField(user.FieldNext, field.TypeString)
	}
	if uu.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CardTable,
			Columns: []string{user.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCardIDs(); len(nodes) > 0 && !uu.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CardTable,
			Columns: []string{user.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CardTable,
			Columns: []string{user.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetDid sets the "did" field.
func (uuo *UserUpdateOne) SetDid(s string) *UserUpdateOne {
	uuo.mutation.SetDid(s)
	return uuo
}

// SetNillableDid sets the "did" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDid(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDid(*s)
	}
	return uuo
}

// ClearDid clears the value of the "did" field.
func (uuo *UserUpdateOne) ClearDid() *UserUpdateOne {
	uuo.mutation.ClearDid()
	return uuo
}

// SetMember sets the "member" field.
func (uuo *UserUpdateOne) SetMember(b bool) *UserUpdateOne {
	uuo.mutation.SetMember(b)
	return uuo
}

// SetNillableMember sets the "member" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMember(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetMember(*b)
	}
	return uuo
}

// ClearMember clears the value of the "member" field.
func (uuo *UserUpdateOne) ClearMember() *UserUpdateOne {
	uuo.mutation.ClearMember()
	return uuo
}

// SetBook sets the "book" field.
func (uuo *UserUpdateOne) SetBook(b bool) *UserUpdateOne {
	uuo.mutation.SetBook(b)
	return uuo
}

// SetNillableBook sets the "book" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBook(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetBook(*b)
	}
	return uuo
}

// ClearBook clears the value of the "book" field.
func (uuo *UserUpdateOne) ClearBook() *UserUpdateOne {
	uuo.mutation.ClearBook()
	return uuo
}

// SetManga sets the "manga" field.
func (uuo *UserUpdateOne) SetManga(b bool) *UserUpdateOne {
	uuo.mutation.SetManga(b)
	return uuo
}

// SetNillableManga sets the "manga" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableManga(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetManga(*b)
	}
	return uuo
}

// ClearManga clears the value of the "manga" field.
func (uuo *UserUpdateOne) ClearManga() *UserUpdateOne {
	uuo.mutation.ClearManga()
	return uuo
}

// SetBadge sets the "badge" field.
func (uuo *UserUpdateOne) SetBadge(b bool) *UserUpdateOne {
	uuo.mutation.SetBadge(b)
	return uuo
}

// SetNillableBadge sets the "badge" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBadge(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetBadge(*b)
	}
	return uuo
}

// ClearBadge clears the value of the "badge" field.
func (uuo *UserUpdateOne) ClearBadge() *UserUpdateOne {
	uuo.mutation.ClearBadge()
	return uuo
}

// SetBsky sets the "bsky" field.
func (uuo *UserUpdateOne) SetBsky(b bool) *UserUpdateOne {
	uuo.mutation.SetBsky(b)
	return uuo
}

// SetNillableBsky sets the "bsky" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBsky(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetBsky(*b)
	}
	return uuo
}

// ClearBsky clears the value of the "bsky" field.
func (uuo *UserUpdateOne) ClearBsky() *UserUpdateOne {
	uuo.mutation.ClearBsky()
	return uuo
}

// SetMastodon sets the "mastodon" field.
func (uuo *UserUpdateOne) SetMastodon(b bool) *UserUpdateOne {
	uuo.mutation.SetMastodon(b)
	return uuo
}

// SetNillableMastodon sets the "mastodon" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMastodon(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetMastodon(*b)
	}
	return uuo
}

// ClearMastodon clears the value of the "mastodon" field.
func (uuo *UserUpdateOne) ClearMastodon() *UserUpdateOne {
	uuo.mutation.ClearMastodon()
	return uuo
}

// SetDelete sets the "delete" field.
func (uuo *UserUpdateOne) SetDelete(b bool) *UserUpdateOne {
	uuo.mutation.SetDelete(b)
	return uuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDelete(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetDelete(*b)
	}
	return uuo
}

// ClearDelete clears the value of the "delete" field.
func (uuo *UserUpdateOne) ClearDelete() *UserUpdateOne {
	uuo.mutation.ClearDelete()
	return uuo
}

// SetHandle sets the "handle" field.
func (uuo *UserUpdateOne) SetHandle(b bool) *UserUpdateOne {
	uuo.mutation.SetHandle(b)
	return uuo
}

// SetNillableHandle sets the "handle" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableHandle(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetHandle(*b)
	}
	return uuo
}

// ClearHandle clears the value of the "handle" field.
func (uuo *UserUpdateOne) ClearHandle() *UserUpdateOne {
	uuo.mutation.ClearHandle()
	return uuo
}

// SetToken sets the "token" field.
func (uuo *UserUpdateOne) SetToken(s string) *UserUpdateOne {
	uuo.mutation.SetToken(s)
	return uuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetToken(*s)
	}
	return uuo
}

// ClearToken clears the value of the "token" field.
func (uuo *UserUpdateOne) ClearToken() *UserUpdateOne {
	uuo.mutation.ClearToken()
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUpdatedAt(*t)
	}
	return uuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uuo *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	uuo.mutation.ClearUpdatedAt()
	return uuo
}

// SetRaidAt sets the "raid_at" field.
func (uuo *UserUpdateOne) SetRaidAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetRaidAt(t)
	return uuo
}

// SetNillableRaidAt sets the "raid_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRaidAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetRaidAt(*t)
	}
	return uuo
}

// ClearRaidAt clears the value of the "raid_at" field.
func (uuo *UserUpdateOne) ClearRaidAt() *UserUpdateOne {
	uuo.mutation.ClearRaidAt()
	return uuo
}

// SetEggAt sets the "egg_at" field.
func (uuo *UserUpdateOne) SetEggAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetEggAt(t)
	return uuo
}

// SetNillableEggAt sets the "egg_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEggAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetEggAt(*t)
	}
	return uuo
}

// ClearEggAt clears the value of the "egg_at" field.
func (uuo *UserUpdateOne) ClearEggAt() *UserUpdateOne {
	uuo.mutation.ClearEggAt()
	return uuo
}

// SetLuck sets the "luck" field.
func (uuo *UserUpdateOne) SetLuck(i int) *UserUpdateOne {
	uuo.mutation.ResetLuck()
	uuo.mutation.SetLuck(i)
	return uuo
}

// SetNillableLuck sets the "luck" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLuck(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetLuck(*i)
	}
	return uuo
}

// AddLuck adds i to the "luck" field.
func (uuo *UserUpdateOne) AddLuck(i int) *UserUpdateOne {
	uuo.mutation.AddLuck(i)
	return uuo
}

// ClearLuck clears the value of the "luck" field.
func (uuo *UserUpdateOne) ClearLuck() *UserUpdateOne {
	uuo.mutation.ClearLuck()
	return uuo
}

// SetLuckAt sets the "luck_at" field.
func (uuo *UserUpdateOne) SetLuckAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLuckAt(t)
	return uuo
}

// SetNillableLuckAt sets the "luck_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLuckAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLuckAt(*t)
	}
	return uuo
}

// ClearLuckAt clears the value of the "luck_at" field.
func (uuo *UserUpdateOne) ClearLuckAt() *UserUpdateOne {
	uuo.mutation.ClearLuckAt()
	return uuo
}

// SetLike sets the "like" field.
func (uuo *UserUpdateOne) SetLike(i int) *UserUpdateOne {
	uuo.mutation.ResetLike()
	uuo.mutation.SetLike(i)
	return uuo
}

// SetNillableLike sets the "like" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLike(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetLike(*i)
	}
	return uuo
}

// AddLike adds i to the "like" field.
func (uuo *UserUpdateOne) AddLike(i int) *UserUpdateOne {
	uuo.mutation.AddLike(i)
	return uuo
}

// ClearLike clears the value of the "like" field.
func (uuo *UserUpdateOne) ClearLike() *UserUpdateOne {
	uuo.mutation.ClearLike()
	return uuo
}

// SetLikeRank sets the "like_rank" field.
func (uuo *UserUpdateOne) SetLikeRank(i int) *UserUpdateOne {
	uuo.mutation.ResetLikeRank()
	uuo.mutation.SetLikeRank(i)
	return uuo
}

// SetNillableLikeRank sets the "like_rank" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLikeRank(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetLikeRank(*i)
	}
	return uuo
}

// AddLikeRank adds i to the "like_rank" field.
func (uuo *UserUpdateOne) AddLikeRank(i int) *UserUpdateOne {
	uuo.mutation.AddLikeRank(i)
	return uuo
}

// ClearLikeRank clears the value of the "like_rank" field.
func (uuo *UserUpdateOne) ClearLikeRank() *UserUpdateOne {
	uuo.mutation.ClearLikeRank()
	return uuo
}

// SetLikeAt sets the "like_at" field.
func (uuo *UserUpdateOne) SetLikeAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLikeAt(t)
	return uuo
}

// SetNillableLikeAt sets the "like_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLikeAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLikeAt(*t)
	}
	return uuo
}

// ClearLikeAt clears the value of the "like_at" field.
func (uuo *UserUpdateOne) ClearLikeAt() *UserUpdateOne {
	uuo.mutation.ClearLikeAt()
	return uuo
}

// SetFav sets the "fav" field.
func (uuo *UserUpdateOne) SetFav(i int) *UserUpdateOne {
	uuo.mutation.ResetFav()
	uuo.mutation.SetFav(i)
	return uuo
}

// SetNillableFav sets the "fav" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFav(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetFav(*i)
	}
	return uuo
}

// AddFav adds i to the "fav" field.
func (uuo *UserUpdateOne) AddFav(i int) *UserUpdateOne {
	uuo.mutation.AddFav(i)
	return uuo
}

// ClearFav clears the value of the "fav" field.
func (uuo *UserUpdateOne) ClearFav() *UserUpdateOne {
	uuo.mutation.ClearFav()
	return uuo
}

// SetTen sets the "ten" field.
func (uuo *UserUpdateOne) SetTen(b bool) *UserUpdateOne {
	uuo.mutation.SetTen(b)
	return uuo
}

// SetNillableTen sets the "ten" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTen(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetTen(*b)
	}
	return uuo
}

// ClearTen clears the value of the "ten" field.
func (uuo *UserUpdateOne) ClearTen() *UserUpdateOne {
	uuo.mutation.ClearTen()
	return uuo
}

// SetTenSu sets the "ten_su" field.
func (uuo *UserUpdateOne) SetTenSu(i int) *UserUpdateOne {
	uuo.mutation.ResetTenSu()
	uuo.mutation.SetTenSu(i)
	return uuo
}

// SetNillableTenSu sets the "ten_su" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTenSu(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetTenSu(*i)
	}
	return uuo
}

// AddTenSu adds i to the "ten_su" field.
func (uuo *UserUpdateOne) AddTenSu(i int) *UserUpdateOne {
	uuo.mutation.AddTenSu(i)
	return uuo
}

// ClearTenSu clears the value of the "ten_su" field.
func (uuo *UserUpdateOne) ClearTenSu() *UserUpdateOne {
	uuo.mutation.ClearTenSu()
	return uuo
}

// SetTenKai sets the "ten_kai" field.
func (uuo *UserUpdateOne) SetTenKai(i int) *UserUpdateOne {
	uuo.mutation.ResetTenKai()
	uuo.mutation.SetTenKai(i)
	return uuo
}

// SetNillableTenKai sets the "ten_kai" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTenKai(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetTenKai(*i)
	}
	return uuo
}

// AddTenKai adds i to the "ten_kai" field.
func (uuo *UserUpdateOne) AddTenKai(i int) *UserUpdateOne {
	uuo.mutation.AddTenKai(i)
	return uuo
}

// ClearTenKai clears the value of the "ten_kai" field.
func (uuo *UserUpdateOne) ClearTenKai() *UserUpdateOne {
	uuo.mutation.ClearTenKai()
	return uuo
}

// SetAiten sets the "aiten" field.
func (uuo *UserUpdateOne) SetAiten(i int) *UserUpdateOne {
	uuo.mutation.ResetAiten()
	uuo.mutation.SetAiten(i)
	return uuo
}

// SetNillableAiten sets the "aiten" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAiten(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetAiten(*i)
	}
	return uuo
}

// AddAiten adds i to the "aiten" field.
func (uuo *UserUpdateOne) AddAiten(i int) *UserUpdateOne {
	uuo.mutation.AddAiten(i)
	return uuo
}

// ClearAiten clears the value of the "aiten" field.
func (uuo *UserUpdateOne) ClearAiten() *UserUpdateOne {
	uuo.mutation.ClearAiten()
	return uuo
}

// SetTenCard sets the "ten_card" field.
func (uuo *UserUpdateOne) SetTenCard(s string) *UserUpdateOne {
	uuo.mutation.SetTenCard(s)
	return uuo
}

// SetNillableTenCard sets the "ten_card" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTenCard(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetTenCard(*s)
	}
	return uuo
}

// ClearTenCard clears the value of the "ten_card" field.
func (uuo *UserUpdateOne) ClearTenCard() *UserUpdateOne {
	uuo.mutation.ClearTenCard()
	return uuo
}

// SetTenDelete sets the "ten_delete" field.
func (uuo *UserUpdateOne) SetTenDelete(s string) *UserUpdateOne {
	uuo.mutation.SetTenDelete(s)
	return uuo
}

// SetNillableTenDelete sets the "ten_delete" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTenDelete(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetTenDelete(*s)
	}
	return uuo
}

// ClearTenDelete clears the value of the "ten_delete" field.
func (uuo *UserUpdateOne) ClearTenDelete() *UserUpdateOne {
	uuo.mutation.ClearTenDelete()
	return uuo
}

// SetTenPost sets the "ten_post" field.
func (uuo *UserUpdateOne) SetTenPost(s string) *UserUpdateOne {
	uuo.mutation.SetTenPost(s)
	return uuo
}

// SetNillableTenPost sets the "ten_post" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTenPost(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetTenPost(*s)
	}
	return uuo
}

// ClearTenPost clears the value of the "ten_post" field.
func (uuo *UserUpdateOne) ClearTenPost() *UserUpdateOne {
	uuo.mutation.ClearTenPost()
	return uuo
}

// SetTenGet sets the "ten_get" field.
func (uuo *UserUpdateOne) SetTenGet(s string) *UserUpdateOne {
	uuo.mutation.SetTenGet(s)
	return uuo
}

// SetNillableTenGet sets the "ten_get" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTenGet(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetTenGet(*s)
	}
	return uuo
}

// ClearTenGet clears the value of the "ten_get" field.
func (uuo *UserUpdateOne) ClearTenGet() *UserUpdateOne {
	uuo.mutation.ClearTenGet()
	return uuo
}

// SetTenAt sets the "ten_at" field.
func (uuo *UserUpdateOne) SetTenAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetTenAt(t)
	return uuo
}

// SetNillableTenAt sets the "ten_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTenAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetTenAt(*t)
	}
	return uuo
}

// ClearTenAt clears the value of the "ten_at" field.
func (uuo *UserUpdateOne) ClearTenAt() *UserUpdateOne {
	uuo.mutation.ClearTenAt()
	return uuo
}

// SetNext sets the "next" field.
func (uuo *UserUpdateOne) SetNext(s string) *UserUpdateOne {
	uuo.mutation.SetNext(s)
	return uuo
}

// SetNillableNext sets the "next" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNext(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNext(*s)
	}
	return uuo
}

// ClearNext clears the value of the "next" field.
func (uuo *UserUpdateOne) ClearNext() *UserUpdateOne {
	uuo.mutation.ClearNext()
	return uuo
}

// AddCardIDs adds the "card" edge to the Card entity by IDs.
func (uuo *UserUpdateOne) AddCardIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddCardIDs(ids...)
	return uuo
}

// AddCard adds the "card" edges to the Card entity.
func (uuo *UserUpdateOne) AddCard(c ...*Card) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCardIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearCard clears all "card" edges to the Card entity.
func (uuo *UserUpdateOne) ClearCard() *UserUpdateOne {
	uuo.mutation.ClearCard()
	return uuo
}

// RemoveCardIDs removes the "card" edge to Card entities by IDs.
func (uuo *UserUpdateOne) RemoveCardIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveCardIDs(ids...)
	return uuo
}

// RemoveCard removes "card" edges to Card entities.
func (uuo *UserUpdateOne) RemoveCard(c ...*Card) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCardIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks[*User, UserMutation](ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Did(); ok {
		_spec.SetField(user.FieldDid, field.TypeString, value)
	}
	if uuo.mutation.DidCleared() {
		_spec.ClearField(user.FieldDid, field.TypeString)
	}
	if value, ok := uuo.mutation.Member(); ok {
		_spec.SetField(user.FieldMember, field.TypeBool, value)
	}
	if uuo.mutation.MemberCleared() {
		_spec.ClearField(user.FieldMember, field.TypeBool)
	}
	if value, ok := uuo.mutation.Book(); ok {
		_spec.SetField(user.FieldBook, field.TypeBool, value)
	}
	if uuo.mutation.BookCleared() {
		_spec.ClearField(user.FieldBook, field.TypeBool)
	}
	if value, ok := uuo.mutation.Manga(); ok {
		_spec.SetField(user.FieldManga, field.TypeBool, value)
	}
	if uuo.mutation.MangaCleared() {
		_spec.ClearField(user.FieldManga, field.TypeBool)
	}
	if value, ok := uuo.mutation.Badge(); ok {
		_spec.SetField(user.FieldBadge, field.TypeBool, value)
	}
	if uuo.mutation.BadgeCleared() {
		_spec.ClearField(user.FieldBadge, field.TypeBool)
	}
	if value, ok := uuo.mutation.Bsky(); ok {
		_spec.SetField(user.FieldBsky, field.TypeBool, value)
	}
	if uuo.mutation.BskyCleared() {
		_spec.ClearField(user.FieldBsky, field.TypeBool)
	}
	if value, ok := uuo.mutation.Mastodon(); ok {
		_spec.SetField(user.FieldMastodon, field.TypeBool, value)
	}
	if uuo.mutation.MastodonCleared() {
		_spec.ClearField(user.FieldMastodon, field.TypeBool)
	}
	if value, ok := uuo.mutation.Delete(); ok {
		_spec.SetField(user.FieldDelete, field.TypeBool, value)
	}
	if uuo.mutation.DeleteCleared() {
		_spec.ClearField(user.FieldDelete, field.TypeBool)
	}
	if value, ok := uuo.mutation.Handle(); ok {
		_spec.SetField(user.FieldHandle, field.TypeBool, value)
	}
	if uuo.mutation.HandleCleared() {
		_spec.ClearField(user.FieldHandle, field.TypeBool)
	}
	if value, ok := uuo.mutation.Token(); ok {
		_spec.SetField(user.FieldToken, field.TypeString, value)
	}
	if uuo.mutation.TokenCleared() {
		_spec.ClearField(user.FieldToken, field.TypeString)
	}
	if uuo.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.RaidAt(); ok {
		_spec.SetField(user.FieldRaidAt, field.TypeTime, value)
	}
	if uuo.mutation.RaidAtCleared() {
		_spec.ClearField(user.FieldRaidAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.EggAt(); ok {
		_spec.SetField(user.FieldEggAt, field.TypeTime, value)
	}
	if uuo.mutation.EggAtCleared() {
		_spec.ClearField(user.FieldEggAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.Luck(); ok {
		_spec.SetField(user.FieldLuck, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedLuck(); ok {
		_spec.AddField(user.FieldLuck, field.TypeInt, value)
	}
	if uuo.mutation.LuckCleared() {
		_spec.ClearField(user.FieldLuck, field.TypeInt)
	}
	if value, ok := uuo.mutation.LuckAt(); ok {
		_spec.SetField(user.FieldLuckAt, field.TypeTime, value)
	}
	if uuo.mutation.LuckAtCleared() {
		_spec.ClearField(user.FieldLuckAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.Like(); ok {
		_spec.SetField(user.FieldLike, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedLike(); ok {
		_spec.AddField(user.FieldLike, field.TypeInt, value)
	}
	if uuo.mutation.LikeCleared() {
		_spec.ClearField(user.FieldLike, field.TypeInt)
	}
	if value, ok := uuo.mutation.LikeRank(); ok {
		_spec.SetField(user.FieldLikeRank, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedLikeRank(); ok {
		_spec.AddField(user.FieldLikeRank, field.TypeInt, value)
	}
	if uuo.mutation.LikeRankCleared() {
		_spec.ClearField(user.FieldLikeRank, field.TypeInt)
	}
	if value, ok := uuo.mutation.LikeAt(); ok {
		_spec.SetField(user.FieldLikeAt, field.TypeTime, value)
	}
	if uuo.mutation.LikeAtCleared() {
		_spec.ClearField(user.FieldLikeAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.Fav(); ok {
		_spec.SetField(user.FieldFav, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedFav(); ok {
		_spec.AddField(user.FieldFav, field.TypeInt, value)
	}
	if uuo.mutation.FavCleared() {
		_spec.ClearField(user.FieldFav, field.TypeInt)
	}
	if value, ok := uuo.mutation.Ten(); ok {
		_spec.SetField(user.FieldTen, field.TypeBool, value)
	}
	if uuo.mutation.TenCleared() {
		_spec.ClearField(user.FieldTen, field.TypeBool)
	}
	if value, ok := uuo.mutation.TenSu(); ok {
		_spec.SetField(user.FieldTenSu, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedTenSu(); ok {
		_spec.AddField(user.FieldTenSu, field.TypeInt, value)
	}
	if uuo.mutation.TenSuCleared() {
		_spec.ClearField(user.FieldTenSu, field.TypeInt)
	}
	if value, ok := uuo.mutation.TenKai(); ok {
		_spec.SetField(user.FieldTenKai, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedTenKai(); ok {
		_spec.AddField(user.FieldTenKai, field.TypeInt, value)
	}
	if uuo.mutation.TenKaiCleared() {
		_spec.ClearField(user.FieldTenKai, field.TypeInt)
	}
	if value, ok := uuo.mutation.Aiten(); ok {
		_spec.SetField(user.FieldAiten, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedAiten(); ok {
		_spec.AddField(user.FieldAiten, field.TypeInt, value)
	}
	if uuo.mutation.AitenCleared() {
		_spec.ClearField(user.FieldAiten, field.TypeInt)
	}
	if value, ok := uuo.mutation.TenCard(); ok {
		_spec.SetField(user.FieldTenCard, field.TypeString, value)
	}
	if uuo.mutation.TenCardCleared() {
		_spec.ClearField(user.FieldTenCard, field.TypeString)
	}
	if value, ok := uuo.mutation.TenDelete(); ok {
		_spec.SetField(user.FieldTenDelete, field.TypeString, value)
	}
	if uuo.mutation.TenDeleteCleared() {
		_spec.ClearField(user.FieldTenDelete, field.TypeString)
	}
	if value, ok := uuo.mutation.TenPost(); ok {
		_spec.SetField(user.FieldTenPost, field.TypeString, value)
	}
	if uuo.mutation.TenPostCleared() {
		_spec.ClearField(user.FieldTenPost, field.TypeString)
	}
	if value, ok := uuo.mutation.TenGet(); ok {
		_spec.SetField(user.FieldTenGet, field.TypeString, value)
	}
	if uuo.mutation.TenGetCleared() {
		_spec.ClearField(user.FieldTenGet, field.TypeString)
	}
	if value, ok := uuo.mutation.TenAt(); ok {
		_spec.SetField(user.FieldTenAt, field.TypeTime, value)
	}
	if uuo.mutation.TenAtCleared() {
		_spec.ClearField(user.FieldTenAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.Next(); ok {
		_spec.SetField(user.FieldNext, field.TypeString, value)
	}
	if uuo.mutation.NextCleared() {
		_spec.ClearField(user.FieldNext, field.TypeString)
	}
	if uuo.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CardTable,
			Columns: []string{user.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCardIDs(); len(nodes) > 0 && !uuo.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CardTable,
			Columns: []string{user.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CardTable,
			Columns: []string{user.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
