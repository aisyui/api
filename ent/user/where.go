// Code generated by ent, DO NOT EDIT.

package user

import (
	"t/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// Did applies equality check predicate on the "did" field. It's identical to DidEQ.
func Did(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDid, v))
}

// Member applies equality check predicate on the "member" field. It's identical to MemberEQ.
func Member(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMember, v))
}

// Book applies equality check predicate on the "book" field. It's identical to BookEQ.
func Book(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBook, v))
}

// Manga applies equality check predicate on the "manga" field. It's identical to MangaEQ.
func Manga(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldManga, v))
}

// Badge applies equality check predicate on the "badge" field. It's identical to BadgeEQ.
func Badge(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBadge, v))
}

// Bsky applies equality check predicate on the "bsky" field. It's identical to BskyEQ.
func Bsky(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBsky, v))
}

// Mastodon applies equality check predicate on the "mastodon" field. It's identical to MastodonEQ.
func Mastodon(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMastodon, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDelete, v))
}

// Handle applies equality check predicate on the "handle" field. It's identical to HandleEQ.
func Handle(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHandle, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldToken, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// RaidAt applies equality check predicate on the "raid_at" field. It's identical to RaidAtEQ.
func RaidAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRaidAt, v))
}

// ServerAt applies equality check predicate on the "server_at" field. It's identical to ServerAtEQ.
func ServerAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldServerAt, v))
}

// EggAt applies equality check predicate on the "egg_at" field. It's identical to EggAtEQ.
func EggAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEggAt, v))
}

// Luck applies equality check predicate on the "luck" field. It's identical to LuckEQ.
func Luck(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLuck, v))
}

// LuckAt applies equality check predicate on the "luck_at" field. It's identical to LuckAtEQ.
func LuckAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLuckAt, v))
}

// Like applies equality check predicate on the "like" field. It's identical to LikeEQ.
func Like(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLike, v))
}

// LikeRank applies equality check predicate on the "like_rank" field. It's identical to LikeRankEQ.
func LikeRank(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLikeRank, v))
}

// LikeAt applies equality check predicate on the "like_at" field. It's identical to LikeAtEQ.
func LikeAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLikeAt, v))
}

// Fav applies equality check predicate on the "fav" field. It's identical to FavEQ.
func Fav(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFav, v))
}

// Ten applies equality check predicate on the "ten" field. It's identical to TenEQ.
func Ten(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTen, v))
}

// TenSu applies equality check predicate on the "ten_su" field. It's identical to TenSuEQ.
func TenSu(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenSu, v))
}

// TenKai applies equality check predicate on the "ten_kai" field. It's identical to TenKaiEQ.
func TenKai(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenKai, v))
}

// Aiten applies equality check predicate on the "aiten" field. It's identical to AitenEQ.
func Aiten(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAiten, v))
}

// TenCard applies equality check predicate on the "ten_card" field. It's identical to TenCardEQ.
func TenCard(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenCard, v))
}

// TenDelete applies equality check predicate on the "ten_delete" field. It's identical to TenDeleteEQ.
func TenDelete(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenDelete, v))
}

// TenPost applies equality check predicate on the "ten_post" field. It's identical to TenPostEQ.
func TenPost(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenPost, v))
}

// TenGet applies equality check predicate on the "ten_get" field. It's identical to TenGetEQ.
func TenGet(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenGet, v))
}

// TenAt applies equality check predicate on the "ten_at" field. It's identical to TenAtEQ.
func TenAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenAt, v))
}

// Next applies equality check predicate on the "next" field. It's identical to NextEQ.
func Next(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNext, v))
}

// Room applies equality check predicate on the "room" field. It's identical to RoomEQ.
func Room(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRoom, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldModel, v))
}

// ModelAt applies equality check predicate on the "model_at" field. It's identical to ModelAtEQ.
func ModelAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldModelAt, v))
}

// ModelAttack applies equality check predicate on the "model_attack" field. It's identical to ModelAttackEQ.
func ModelAttack(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldModelAttack, v))
}

// ModelLimit applies equality check predicate on the "model_limit" field. It's identical to ModelLimitEQ.
func ModelLimit(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldModelLimit, v))
}

// ModelSkill applies equality check predicate on the "model_skill" field. It's identical to ModelSkillEQ.
func ModelSkill(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldModelSkill, v))
}

// ModelMode applies equality check predicate on the "model_mode" field. It's identical to ModelModeEQ.
func ModelMode(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldModelMode, v))
}

// ModelCritical applies equality check predicate on the "model_critical" field. It's identical to ModelCriticalEQ.
func ModelCritical(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldModelCritical, v))
}

// ModelCriticalD applies equality check predicate on the "model_critical_d" field. It's identical to ModelCriticalDEQ.
func ModelCriticalD(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldModelCriticalD, v))
}

// Game applies equality check predicate on the "game" field. It's identical to GameEQ.
func Game(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGame, v))
}

// GameTest applies equality check predicate on the "game_test" field. It's identical to GameTestEQ.
func GameTest(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGameTest, v))
}

// GameEnd applies equality check predicate on the "game_end" field. It's identical to GameEndEQ.
func GameEnd(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGameEnd, v))
}

// GameAccount applies equality check predicate on the "game_account" field. It's identical to GameAccountEQ.
func GameAccount(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGameAccount, v))
}

// GameLv applies equality check predicate on the "game_lv" field. It's identical to GameLvEQ.
func GameLv(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGameLv, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// DidEQ applies the EQ predicate on the "did" field.
func DidEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDid, v))
}

// DidNEQ applies the NEQ predicate on the "did" field.
func DidNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDid, v))
}

// DidIn applies the In predicate on the "did" field.
func DidIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDid, vs...))
}

// DidNotIn applies the NotIn predicate on the "did" field.
func DidNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDid, vs...))
}

// DidGT applies the GT predicate on the "did" field.
func DidGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDid, v))
}

// DidGTE applies the GTE predicate on the "did" field.
func DidGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDid, v))
}

// DidLT applies the LT predicate on the "did" field.
func DidLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDid, v))
}

// DidLTE applies the LTE predicate on the "did" field.
func DidLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDid, v))
}

// DidContains applies the Contains predicate on the "did" field.
func DidContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDid, v))
}

// DidHasPrefix applies the HasPrefix predicate on the "did" field.
func DidHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDid, v))
}

// DidHasSuffix applies the HasSuffix predicate on the "did" field.
func DidHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDid, v))
}

// DidIsNil applies the IsNil predicate on the "did" field.
func DidIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDid))
}

// DidNotNil applies the NotNil predicate on the "did" field.
func DidNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDid))
}

// DidEqualFold applies the EqualFold predicate on the "did" field.
func DidEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDid, v))
}

// DidContainsFold applies the ContainsFold predicate on the "did" field.
func DidContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDid, v))
}

// MemberEQ applies the EQ predicate on the "member" field.
func MemberEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMember, v))
}

// MemberNEQ applies the NEQ predicate on the "member" field.
func MemberNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldMember, v))
}

// MemberIsNil applies the IsNil predicate on the "member" field.
func MemberIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldMember))
}

// MemberNotNil applies the NotNil predicate on the "member" field.
func MemberNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldMember))
}

// BookEQ applies the EQ predicate on the "book" field.
func BookEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBook, v))
}

// BookNEQ applies the NEQ predicate on the "book" field.
func BookNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBook, v))
}

// BookIsNil applies the IsNil predicate on the "book" field.
func BookIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBook))
}

// BookNotNil applies the NotNil predicate on the "book" field.
func BookNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBook))
}

// MangaEQ applies the EQ predicate on the "manga" field.
func MangaEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldManga, v))
}

// MangaNEQ applies the NEQ predicate on the "manga" field.
func MangaNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldManga, v))
}

// MangaIsNil applies the IsNil predicate on the "manga" field.
func MangaIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldManga))
}

// MangaNotNil applies the NotNil predicate on the "manga" field.
func MangaNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldManga))
}

// BadgeEQ applies the EQ predicate on the "badge" field.
func BadgeEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBadge, v))
}

// BadgeNEQ applies the NEQ predicate on the "badge" field.
func BadgeNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBadge, v))
}

// BadgeIsNil applies the IsNil predicate on the "badge" field.
func BadgeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBadge))
}

// BadgeNotNil applies the NotNil predicate on the "badge" field.
func BadgeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBadge))
}

// BskyEQ applies the EQ predicate on the "bsky" field.
func BskyEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBsky, v))
}

// BskyNEQ applies the NEQ predicate on the "bsky" field.
func BskyNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBsky, v))
}

// BskyIsNil applies the IsNil predicate on the "bsky" field.
func BskyIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBsky))
}

// BskyNotNil applies the NotNil predicate on the "bsky" field.
func BskyNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBsky))
}

// MastodonEQ applies the EQ predicate on the "mastodon" field.
func MastodonEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMastodon, v))
}

// MastodonNEQ applies the NEQ predicate on the "mastodon" field.
func MastodonNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldMastodon, v))
}

// MastodonIsNil applies the IsNil predicate on the "mastodon" field.
func MastodonIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldMastodon))
}

// MastodonNotNil applies the NotNil predicate on the "mastodon" field.
func MastodonNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldMastodon))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDelete))
}

// HandleEQ applies the EQ predicate on the "handle" field.
func HandleEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHandle, v))
}

// HandleNEQ applies the NEQ predicate on the "handle" field.
func HandleNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHandle, v))
}

// HandleIsNil applies the IsNil predicate on the "handle" field.
func HandleIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldHandle))
}

// HandleNotNil applies the NotNil predicate on the "handle" field.
func HandleNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldHandle))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldToken, v))
}

// TokenIsNil applies the IsNil predicate on the "token" field.
func TokenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldToken))
}

// TokenNotNil applies the NotNil predicate on the "token" field.
func TokenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldToken))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldToken, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUpdatedAt))
}

// RaidAtEQ applies the EQ predicate on the "raid_at" field.
func RaidAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRaidAt, v))
}

// RaidAtNEQ applies the NEQ predicate on the "raid_at" field.
func RaidAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRaidAt, v))
}

// RaidAtIn applies the In predicate on the "raid_at" field.
func RaidAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldRaidAt, vs...))
}

// RaidAtNotIn applies the NotIn predicate on the "raid_at" field.
func RaidAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRaidAt, vs...))
}

// RaidAtGT applies the GT predicate on the "raid_at" field.
func RaidAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldRaidAt, v))
}

// RaidAtGTE applies the GTE predicate on the "raid_at" field.
func RaidAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRaidAt, v))
}

// RaidAtLT applies the LT predicate on the "raid_at" field.
func RaidAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldRaidAt, v))
}

// RaidAtLTE applies the LTE predicate on the "raid_at" field.
func RaidAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRaidAt, v))
}

// RaidAtIsNil applies the IsNil predicate on the "raid_at" field.
func RaidAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldRaidAt))
}

// RaidAtNotNil applies the NotNil predicate on the "raid_at" field.
func RaidAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldRaidAt))
}

// ServerAtEQ applies the EQ predicate on the "server_at" field.
func ServerAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldServerAt, v))
}

// ServerAtNEQ applies the NEQ predicate on the "server_at" field.
func ServerAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldServerAt, v))
}

// ServerAtIn applies the In predicate on the "server_at" field.
func ServerAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldServerAt, vs...))
}

// ServerAtNotIn applies the NotIn predicate on the "server_at" field.
func ServerAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldServerAt, vs...))
}

// ServerAtGT applies the GT predicate on the "server_at" field.
func ServerAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldServerAt, v))
}

// ServerAtGTE applies the GTE predicate on the "server_at" field.
func ServerAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldServerAt, v))
}

// ServerAtLT applies the LT predicate on the "server_at" field.
func ServerAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldServerAt, v))
}

// ServerAtLTE applies the LTE predicate on the "server_at" field.
func ServerAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldServerAt, v))
}

// ServerAtIsNil applies the IsNil predicate on the "server_at" field.
func ServerAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldServerAt))
}

// ServerAtNotNil applies the NotNil predicate on the "server_at" field.
func ServerAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldServerAt))
}

// EggAtEQ applies the EQ predicate on the "egg_at" field.
func EggAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEggAt, v))
}

// EggAtNEQ applies the NEQ predicate on the "egg_at" field.
func EggAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEggAt, v))
}

// EggAtIn applies the In predicate on the "egg_at" field.
func EggAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldEggAt, vs...))
}

// EggAtNotIn applies the NotIn predicate on the "egg_at" field.
func EggAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEggAt, vs...))
}

// EggAtGT applies the GT predicate on the "egg_at" field.
func EggAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldEggAt, v))
}

// EggAtGTE applies the GTE predicate on the "egg_at" field.
func EggAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEggAt, v))
}

// EggAtLT applies the LT predicate on the "egg_at" field.
func EggAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldEggAt, v))
}

// EggAtLTE applies the LTE predicate on the "egg_at" field.
func EggAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEggAt, v))
}

// EggAtIsNil applies the IsNil predicate on the "egg_at" field.
func EggAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEggAt))
}

// EggAtNotNil applies the NotNil predicate on the "egg_at" field.
func EggAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEggAt))
}

// LuckEQ applies the EQ predicate on the "luck" field.
func LuckEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLuck, v))
}

// LuckNEQ applies the NEQ predicate on the "luck" field.
func LuckNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLuck, v))
}

// LuckIn applies the In predicate on the "luck" field.
func LuckIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldLuck, vs...))
}

// LuckNotIn applies the NotIn predicate on the "luck" field.
func LuckNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLuck, vs...))
}

// LuckGT applies the GT predicate on the "luck" field.
func LuckGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldLuck, v))
}

// LuckGTE applies the GTE predicate on the "luck" field.
func LuckGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLuck, v))
}

// LuckLT applies the LT predicate on the "luck" field.
func LuckLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldLuck, v))
}

// LuckLTE applies the LTE predicate on the "luck" field.
func LuckLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLuck, v))
}

// LuckIsNil applies the IsNil predicate on the "luck" field.
func LuckIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLuck))
}

// LuckNotNil applies the NotNil predicate on the "luck" field.
func LuckNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLuck))
}

// LuckAtEQ applies the EQ predicate on the "luck_at" field.
func LuckAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLuckAt, v))
}

// LuckAtNEQ applies the NEQ predicate on the "luck_at" field.
func LuckAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLuckAt, v))
}

// LuckAtIn applies the In predicate on the "luck_at" field.
func LuckAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLuckAt, vs...))
}

// LuckAtNotIn applies the NotIn predicate on the "luck_at" field.
func LuckAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLuckAt, vs...))
}

// LuckAtGT applies the GT predicate on the "luck_at" field.
func LuckAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLuckAt, v))
}

// LuckAtGTE applies the GTE predicate on the "luck_at" field.
func LuckAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLuckAt, v))
}

// LuckAtLT applies the LT predicate on the "luck_at" field.
func LuckAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLuckAt, v))
}

// LuckAtLTE applies the LTE predicate on the "luck_at" field.
func LuckAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLuckAt, v))
}

// LuckAtIsNil applies the IsNil predicate on the "luck_at" field.
func LuckAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLuckAt))
}

// LuckAtNotNil applies the NotNil predicate on the "luck_at" field.
func LuckAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLuckAt))
}

// LikeEQ applies the EQ predicate on the "like" field.
func LikeEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLike, v))
}

// LikeNEQ applies the NEQ predicate on the "like" field.
func LikeNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLike, v))
}

// LikeIn applies the In predicate on the "like" field.
func LikeIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldLike, vs...))
}

// LikeNotIn applies the NotIn predicate on the "like" field.
func LikeNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLike, vs...))
}

// LikeGT applies the GT predicate on the "like" field.
func LikeGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldLike, v))
}

// LikeGTE applies the GTE predicate on the "like" field.
func LikeGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLike, v))
}

// LikeLT applies the LT predicate on the "like" field.
func LikeLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldLike, v))
}

// LikeLTE applies the LTE predicate on the "like" field.
func LikeLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLike, v))
}

// LikeIsNil applies the IsNil predicate on the "like" field.
func LikeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLike))
}

// LikeNotNil applies the NotNil predicate on the "like" field.
func LikeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLike))
}

// LikeRankEQ applies the EQ predicate on the "like_rank" field.
func LikeRankEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLikeRank, v))
}

// LikeRankNEQ applies the NEQ predicate on the "like_rank" field.
func LikeRankNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLikeRank, v))
}

// LikeRankIn applies the In predicate on the "like_rank" field.
func LikeRankIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldLikeRank, vs...))
}

// LikeRankNotIn applies the NotIn predicate on the "like_rank" field.
func LikeRankNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLikeRank, vs...))
}

// LikeRankGT applies the GT predicate on the "like_rank" field.
func LikeRankGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldLikeRank, v))
}

// LikeRankGTE applies the GTE predicate on the "like_rank" field.
func LikeRankGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLikeRank, v))
}

// LikeRankLT applies the LT predicate on the "like_rank" field.
func LikeRankLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldLikeRank, v))
}

// LikeRankLTE applies the LTE predicate on the "like_rank" field.
func LikeRankLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLikeRank, v))
}

// LikeRankIsNil applies the IsNil predicate on the "like_rank" field.
func LikeRankIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLikeRank))
}

// LikeRankNotNil applies the NotNil predicate on the "like_rank" field.
func LikeRankNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLikeRank))
}

// LikeAtEQ applies the EQ predicate on the "like_at" field.
func LikeAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLikeAt, v))
}

// LikeAtNEQ applies the NEQ predicate on the "like_at" field.
func LikeAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLikeAt, v))
}

// LikeAtIn applies the In predicate on the "like_at" field.
func LikeAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLikeAt, vs...))
}

// LikeAtNotIn applies the NotIn predicate on the "like_at" field.
func LikeAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLikeAt, vs...))
}

// LikeAtGT applies the GT predicate on the "like_at" field.
func LikeAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLikeAt, v))
}

// LikeAtGTE applies the GTE predicate on the "like_at" field.
func LikeAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLikeAt, v))
}

// LikeAtLT applies the LT predicate on the "like_at" field.
func LikeAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLikeAt, v))
}

// LikeAtLTE applies the LTE predicate on the "like_at" field.
func LikeAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLikeAt, v))
}

// LikeAtIsNil applies the IsNil predicate on the "like_at" field.
func LikeAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLikeAt))
}

// LikeAtNotNil applies the NotNil predicate on the "like_at" field.
func LikeAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLikeAt))
}

// FavEQ applies the EQ predicate on the "fav" field.
func FavEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFav, v))
}

// FavNEQ applies the NEQ predicate on the "fav" field.
func FavNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFav, v))
}

// FavIn applies the In predicate on the "fav" field.
func FavIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldFav, vs...))
}

// FavNotIn applies the NotIn predicate on the "fav" field.
func FavNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFav, vs...))
}

// FavGT applies the GT predicate on the "fav" field.
func FavGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldFav, v))
}

// FavGTE applies the GTE predicate on the "fav" field.
func FavGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFav, v))
}

// FavLT applies the LT predicate on the "fav" field.
func FavLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldFav, v))
}

// FavLTE applies the LTE predicate on the "fav" field.
func FavLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFav, v))
}

// FavIsNil applies the IsNil predicate on the "fav" field.
func FavIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldFav))
}

// FavNotNil applies the NotNil predicate on the "fav" field.
func FavNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldFav))
}

// TenEQ applies the EQ predicate on the "ten" field.
func TenEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTen, v))
}

// TenNEQ applies the NEQ predicate on the "ten" field.
func TenNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTen, v))
}

// TenIsNil applies the IsNil predicate on the "ten" field.
func TenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTen))
}

// TenNotNil applies the NotNil predicate on the "ten" field.
func TenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTen))
}

// TenSuEQ applies the EQ predicate on the "ten_su" field.
func TenSuEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenSu, v))
}

// TenSuNEQ applies the NEQ predicate on the "ten_su" field.
func TenSuNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTenSu, v))
}

// TenSuIn applies the In predicate on the "ten_su" field.
func TenSuIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldTenSu, vs...))
}

// TenSuNotIn applies the NotIn predicate on the "ten_su" field.
func TenSuNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTenSu, vs...))
}

// TenSuGT applies the GT predicate on the "ten_su" field.
func TenSuGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldTenSu, v))
}

// TenSuGTE applies the GTE predicate on the "ten_su" field.
func TenSuGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTenSu, v))
}

// TenSuLT applies the LT predicate on the "ten_su" field.
func TenSuLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldTenSu, v))
}

// TenSuLTE applies the LTE predicate on the "ten_su" field.
func TenSuLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTenSu, v))
}

// TenSuIsNil applies the IsNil predicate on the "ten_su" field.
func TenSuIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTenSu))
}

// TenSuNotNil applies the NotNil predicate on the "ten_su" field.
func TenSuNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTenSu))
}

// TenKaiEQ applies the EQ predicate on the "ten_kai" field.
func TenKaiEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenKai, v))
}

// TenKaiNEQ applies the NEQ predicate on the "ten_kai" field.
func TenKaiNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTenKai, v))
}

// TenKaiIn applies the In predicate on the "ten_kai" field.
func TenKaiIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldTenKai, vs...))
}

// TenKaiNotIn applies the NotIn predicate on the "ten_kai" field.
func TenKaiNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTenKai, vs...))
}

// TenKaiGT applies the GT predicate on the "ten_kai" field.
func TenKaiGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldTenKai, v))
}

// TenKaiGTE applies the GTE predicate on the "ten_kai" field.
func TenKaiGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTenKai, v))
}

// TenKaiLT applies the LT predicate on the "ten_kai" field.
func TenKaiLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldTenKai, v))
}

// TenKaiLTE applies the LTE predicate on the "ten_kai" field.
func TenKaiLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTenKai, v))
}

// TenKaiIsNil applies the IsNil predicate on the "ten_kai" field.
func TenKaiIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTenKai))
}

// TenKaiNotNil applies the NotNil predicate on the "ten_kai" field.
func TenKaiNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTenKai))
}

// AitenEQ applies the EQ predicate on the "aiten" field.
func AitenEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAiten, v))
}

// AitenNEQ applies the NEQ predicate on the "aiten" field.
func AitenNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAiten, v))
}

// AitenIn applies the In predicate on the "aiten" field.
func AitenIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldAiten, vs...))
}

// AitenNotIn applies the NotIn predicate on the "aiten" field.
func AitenNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAiten, vs...))
}

// AitenGT applies the GT predicate on the "aiten" field.
func AitenGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldAiten, v))
}

// AitenGTE applies the GTE predicate on the "aiten" field.
func AitenGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAiten, v))
}

// AitenLT applies the LT predicate on the "aiten" field.
func AitenLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldAiten, v))
}

// AitenLTE applies the LTE predicate on the "aiten" field.
func AitenLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAiten, v))
}

// AitenIsNil applies the IsNil predicate on the "aiten" field.
func AitenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAiten))
}

// AitenNotNil applies the NotNil predicate on the "aiten" field.
func AitenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAiten))
}

// TenCardEQ applies the EQ predicate on the "ten_card" field.
func TenCardEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenCard, v))
}

// TenCardNEQ applies the NEQ predicate on the "ten_card" field.
func TenCardNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTenCard, v))
}

// TenCardIn applies the In predicate on the "ten_card" field.
func TenCardIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTenCard, vs...))
}

// TenCardNotIn applies the NotIn predicate on the "ten_card" field.
func TenCardNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTenCard, vs...))
}

// TenCardGT applies the GT predicate on the "ten_card" field.
func TenCardGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTenCard, v))
}

// TenCardGTE applies the GTE predicate on the "ten_card" field.
func TenCardGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTenCard, v))
}

// TenCardLT applies the LT predicate on the "ten_card" field.
func TenCardLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTenCard, v))
}

// TenCardLTE applies the LTE predicate on the "ten_card" field.
func TenCardLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTenCard, v))
}

// TenCardContains applies the Contains predicate on the "ten_card" field.
func TenCardContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTenCard, v))
}

// TenCardHasPrefix applies the HasPrefix predicate on the "ten_card" field.
func TenCardHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTenCard, v))
}

// TenCardHasSuffix applies the HasSuffix predicate on the "ten_card" field.
func TenCardHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTenCard, v))
}

// TenCardIsNil applies the IsNil predicate on the "ten_card" field.
func TenCardIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTenCard))
}

// TenCardNotNil applies the NotNil predicate on the "ten_card" field.
func TenCardNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTenCard))
}

// TenCardEqualFold applies the EqualFold predicate on the "ten_card" field.
func TenCardEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTenCard, v))
}

// TenCardContainsFold applies the ContainsFold predicate on the "ten_card" field.
func TenCardContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTenCard, v))
}

// TenDeleteEQ applies the EQ predicate on the "ten_delete" field.
func TenDeleteEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenDelete, v))
}

// TenDeleteNEQ applies the NEQ predicate on the "ten_delete" field.
func TenDeleteNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTenDelete, v))
}

// TenDeleteIn applies the In predicate on the "ten_delete" field.
func TenDeleteIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTenDelete, vs...))
}

// TenDeleteNotIn applies the NotIn predicate on the "ten_delete" field.
func TenDeleteNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTenDelete, vs...))
}

// TenDeleteGT applies the GT predicate on the "ten_delete" field.
func TenDeleteGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTenDelete, v))
}

// TenDeleteGTE applies the GTE predicate on the "ten_delete" field.
func TenDeleteGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTenDelete, v))
}

// TenDeleteLT applies the LT predicate on the "ten_delete" field.
func TenDeleteLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTenDelete, v))
}

// TenDeleteLTE applies the LTE predicate on the "ten_delete" field.
func TenDeleteLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTenDelete, v))
}

// TenDeleteContains applies the Contains predicate on the "ten_delete" field.
func TenDeleteContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTenDelete, v))
}

// TenDeleteHasPrefix applies the HasPrefix predicate on the "ten_delete" field.
func TenDeleteHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTenDelete, v))
}

// TenDeleteHasSuffix applies the HasSuffix predicate on the "ten_delete" field.
func TenDeleteHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTenDelete, v))
}

// TenDeleteIsNil applies the IsNil predicate on the "ten_delete" field.
func TenDeleteIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTenDelete))
}

// TenDeleteNotNil applies the NotNil predicate on the "ten_delete" field.
func TenDeleteNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTenDelete))
}

// TenDeleteEqualFold applies the EqualFold predicate on the "ten_delete" field.
func TenDeleteEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTenDelete, v))
}

// TenDeleteContainsFold applies the ContainsFold predicate on the "ten_delete" field.
func TenDeleteContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTenDelete, v))
}

// TenPostEQ applies the EQ predicate on the "ten_post" field.
func TenPostEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenPost, v))
}

// TenPostNEQ applies the NEQ predicate on the "ten_post" field.
func TenPostNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTenPost, v))
}

// TenPostIn applies the In predicate on the "ten_post" field.
func TenPostIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTenPost, vs...))
}

// TenPostNotIn applies the NotIn predicate on the "ten_post" field.
func TenPostNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTenPost, vs...))
}

// TenPostGT applies the GT predicate on the "ten_post" field.
func TenPostGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTenPost, v))
}

// TenPostGTE applies the GTE predicate on the "ten_post" field.
func TenPostGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTenPost, v))
}

// TenPostLT applies the LT predicate on the "ten_post" field.
func TenPostLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTenPost, v))
}

// TenPostLTE applies the LTE predicate on the "ten_post" field.
func TenPostLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTenPost, v))
}

// TenPostContains applies the Contains predicate on the "ten_post" field.
func TenPostContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTenPost, v))
}

// TenPostHasPrefix applies the HasPrefix predicate on the "ten_post" field.
func TenPostHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTenPost, v))
}

// TenPostHasSuffix applies the HasSuffix predicate on the "ten_post" field.
func TenPostHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTenPost, v))
}

// TenPostIsNil applies the IsNil predicate on the "ten_post" field.
func TenPostIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTenPost))
}

// TenPostNotNil applies the NotNil predicate on the "ten_post" field.
func TenPostNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTenPost))
}

// TenPostEqualFold applies the EqualFold predicate on the "ten_post" field.
func TenPostEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTenPost, v))
}

// TenPostContainsFold applies the ContainsFold predicate on the "ten_post" field.
func TenPostContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTenPost, v))
}

// TenGetEQ applies the EQ predicate on the "ten_get" field.
func TenGetEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenGet, v))
}

// TenGetNEQ applies the NEQ predicate on the "ten_get" field.
func TenGetNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTenGet, v))
}

// TenGetIn applies the In predicate on the "ten_get" field.
func TenGetIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTenGet, vs...))
}

// TenGetNotIn applies the NotIn predicate on the "ten_get" field.
func TenGetNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTenGet, vs...))
}

// TenGetGT applies the GT predicate on the "ten_get" field.
func TenGetGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTenGet, v))
}

// TenGetGTE applies the GTE predicate on the "ten_get" field.
func TenGetGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTenGet, v))
}

// TenGetLT applies the LT predicate on the "ten_get" field.
func TenGetLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTenGet, v))
}

// TenGetLTE applies the LTE predicate on the "ten_get" field.
func TenGetLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTenGet, v))
}

// TenGetContains applies the Contains predicate on the "ten_get" field.
func TenGetContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTenGet, v))
}

// TenGetHasPrefix applies the HasPrefix predicate on the "ten_get" field.
func TenGetHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTenGet, v))
}

// TenGetHasSuffix applies the HasSuffix predicate on the "ten_get" field.
func TenGetHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTenGet, v))
}

// TenGetIsNil applies the IsNil predicate on the "ten_get" field.
func TenGetIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTenGet))
}

// TenGetNotNil applies the NotNil predicate on the "ten_get" field.
func TenGetNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTenGet))
}

// TenGetEqualFold applies the EqualFold predicate on the "ten_get" field.
func TenGetEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTenGet, v))
}

// TenGetContainsFold applies the ContainsFold predicate on the "ten_get" field.
func TenGetContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTenGet, v))
}

// TenAtEQ applies the EQ predicate on the "ten_at" field.
func TenAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenAt, v))
}

// TenAtNEQ applies the NEQ predicate on the "ten_at" field.
func TenAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTenAt, v))
}

// TenAtIn applies the In predicate on the "ten_at" field.
func TenAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldTenAt, vs...))
}

// TenAtNotIn applies the NotIn predicate on the "ten_at" field.
func TenAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTenAt, vs...))
}

// TenAtGT applies the GT predicate on the "ten_at" field.
func TenAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldTenAt, v))
}

// TenAtGTE applies the GTE predicate on the "ten_at" field.
func TenAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTenAt, v))
}

// TenAtLT applies the LT predicate on the "ten_at" field.
func TenAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldTenAt, v))
}

// TenAtLTE applies the LTE predicate on the "ten_at" field.
func TenAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTenAt, v))
}

// TenAtIsNil applies the IsNil predicate on the "ten_at" field.
func TenAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTenAt))
}

// TenAtNotNil applies the NotNil predicate on the "ten_at" field.
func TenAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTenAt))
}

// NextEQ applies the EQ predicate on the "next" field.
func NextEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNext, v))
}

// NextNEQ applies the NEQ predicate on the "next" field.
func NextNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNext, v))
}

// NextIn applies the In predicate on the "next" field.
func NextIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNext, vs...))
}

// NextNotIn applies the NotIn predicate on the "next" field.
func NextNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNext, vs...))
}

// NextGT applies the GT predicate on the "next" field.
func NextGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNext, v))
}

// NextGTE applies the GTE predicate on the "next" field.
func NextGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNext, v))
}

// NextLT applies the LT predicate on the "next" field.
func NextLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNext, v))
}

// NextLTE applies the LTE predicate on the "next" field.
func NextLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNext, v))
}

// NextContains applies the Contains predicate on the "next" field.
func NextContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNext, v))
}

// NextHasPrefix applies the HasPrefix predicate on the "next" field.
func NextHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNext, v))
}

// NextHasSuffix applies the HasSuffix predicate on the "next" field.
func NextHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNext, v))
}

// NextIsNil applies the IsNil predicate on the "next" field.
func NextIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldNext))
}

// NextNotNil applies the NotNil predicate on the "next" field.
func NextNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldNext))
}

// NextEqualFold applies the EqualFold predicate on the "next" field.
func NextEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNext, v))
}

// NextContainsFold applies the ContainsFold predicate on the "next" field.
func NextContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNext, v))
}

// RoomEQ applies the EQ predicate on the "room" field.
func RoomEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRoom, v))
}

// RoomNEQ applies the NEQ predicate on the "room" field.
func RoomNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRoom, v))
}

// RoomIn applies the In predicate on the "room" field.
func RoomIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldRoom, vs...))
}

// RoomNotIn applies the NotIn predicate on the "room" field.
func RoomNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRoom, vs...))
}

// RoomGT applies the GT predicate on the "room" field.
func RoomGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldRoom, v))
}

// RoomGTE applies the GTE predicate on the "room" field.
func RoomGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRoom, v))
}

// RoomLT applies the LT predicate on the "room" field.
func RoomLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldRoom, v))
}

// RoomLTE applies the LTE predicate on the "room" field.
func RoomLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRoom, v))
}

// RoomIsNil applies the IsNil predicate on the "room" field.
func RoomIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldRoom))
}

// RoomNotNil applies the NotNil predicate on the "room" field.
func RoomNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldRoom))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldModel, v))
}

// ModelIsNil applies the IsNil predicate on the "model" field.
func ModelIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldModel))
}

// ModelNotNil applies the NotNil predicate on the "model" field.
func ModelNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldModel))
}

// ModelAtEQ applies the EQ predicate on the "model_at" field.
func ModelAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldModelAt, v))
}

// ModelAtNEQ applies the NEQ predicate on the "model_at" field.
func ModelAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldModelAt, v))
}

// ModelAtIn applies the In predicate on the "model_at" field.
func ModelAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldModelAt, vs...))
}

// ModelAtNotIn applies the NotIn predicate on the "model_at" field.
func ModelAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldModelAt, vs...))
}

// ModelAtGT applies the GT predicate on the "model_at" field.
func ModelAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldModelAt, v))
}

// ModelAtGTE applies the GTE predicate on the "model_at" field.
func ModelAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldModelAt, v))
}

// ModelAtLT applies the LT predicate on the "model_at" field.
func ModelAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldModelAt, v))
}

// ModelAtLTE applies the LTE predicate on the "model_at" field.
func ModelAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldModelAt, v))
}

// ModelAtIsNil applies the IsNil predicate on the "model_at" field.
func ModelAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldModelAt))
}

// ModelAtNotNil applies the NotNil predicate on the "model_at" field.
func ModelAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldModelAt))
}

// ModelAttackEQ applies the EQ predicate on the "model_attack" field.
func ModelAttackEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldModelAttack, v))
}

// ModelAttackNEQ applies the NEQ predicate on the "model_attack" field.
func ModelAttackNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldModelAttack, v))
}

// ModelAttackIn applies the In predicate on the "model_attack" field.
func ModelAttackIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldModelAttack, vs...))
}

// ModelAttackNotIn applies the NotIn predicate on the "model_attack" field.
func ModelAttackNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldModelAttack, vs...))
}

// ModelAttackGT applies the GT predicate on the "model_attack" field.
func ModelAttackGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldModelAttack, v))
}

// ModelAttackGTE applies the GTE predicate on the "model_attack" field.
func ModelAttackGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldModelAttack, v))
}

// ModelAttackLT applies the LT predicate on the "model_attack" field.
func ModelAttackLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldModelAttack, v))
}

// ModelAttackLTE applies the LTE predicate on the "model_attack" field.
func ModelAttackLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldModelAttack, v))
}

// ModelAttackIsNil applies the IsNil predicate on the "model_attack" field.
func ModelAttackIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldModelAttack))
}

// ModelAttackNotNil applies the NotNil predicate on the "model_attack" field.
func ModelAttackNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldModelAttack))
}

// ModelLimitEQ applies the EQ predicate on the "model_limit" field.
func ModelLimitEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldModelLimit, v))
}

// ModelLimitNEQ applies the NEQ predicate on the "model_limit" field.
func ModelLimitNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldModelLimit, v))
}

// ModelLimitIn applies the In predicate on the "model_limit" field.
func ModelLimitIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldModelLimit, vs...))
}

// ModelLimitNotIn applies the NotIn predicate on the "model_limit" field.
func ModelLimitNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldModelLimit, vs...))
}

// ModelLimitGT applies the GT predicate on the "model_limit" field.
func ModelLimitGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldModelLimit, v))
}

// ModelLimitGTE applies the GTE predicate on the "model_limit" field.
func ModelLimitGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldModelLimit, v))
}

// ModelLimitLT applies the LT predicate on the "model_limit" field.
func ModelLimitLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldModelLimit, v))
}

// ModelLimitLTE applies the LTE predicate on the "model_limit" field.
func ModelLimitLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldModelLimit, v))
}

// ModelLimitIsNil applies the IsNil predicate on the "model_limit" field.
func ModelLimitIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldModelLimit))
}

// ModelLimitNotNil applies the NotNil predicate on the "model_limit" field.
func ModelLimitNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldModelLimit))
}

// ModelSkillEQ applies the EQ predicate on the "model_skill" field.
func ModelSkillEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldModelSkill, v))
}

// ModelSkillNEQ applies the NEQ predicate on the "model_skill" field.
func ModelSkillNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldModelSkill, v))
}

// ModelSkillIn applies the In predicate on the "model_skill" field.
func ModelSkillIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldModelSkill, vs...))
}

// ModelSkillNotIn applies the NotIn predicate on the "model_skill" field.
func ModelSkillNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldModelSkill, vs...))
}

// ModelSkillGT applies the GT predicate on the "model_skill" field.
func ModelSkillGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldModelSkill, v))
}

// ModelSkillGTE applies the GTE predicate on the "model_skill" field.
func ModelSkillGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldModelSkill, v))
}

// ModelSkillLT applies the LT predicate on the "model_skill" field.
func ModelSkillLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldModelSkill, v))
}

// ModelSkillLTE applies the LTE predicate on the "model_skill" field.
func ModelSkillLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldModelSkill, v))
}

// ModelSkillIsNil applies the IsNil predicate on the "model_skill" field.
func ModelSkillIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldModelSkill))
}

// ModelSkillNotNil applies the NotNil predicate on the "model_skill" field.
func ModelSkillNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldModelSkill))
}

// ModelModeEQ applies the EQ predicate on the "model_mode" field.
func ModelModeEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldModelMode, v))
}

// ModelModeNEQ applies the NEQ predicate on the "model_mode" field.
func ModelModeNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldModelMode, v))
}

// ModelModeIn applies the In predicate on the "model_mode" field.
func ModelModeIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldModelMode, vs...))
}

// ModelModeNotIn applies the NotIn predicate on the "model_mode" field.
func ModelModeNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldModelMode, vs...))
}

// ModelModeGT applies the GT predicate on the "model_mode" field.
func ModelModeGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldModelMode, v))
}

// ModelModeGTE applies the GTE predicate on the "model_mode" field.
func ModelModeGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldModelMode, v))
}

// ModelModeLT applies the LT predicate on the "model_mode" field.
func ModelModeLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldModelMode, v))
}

// ModelModeLTE applies the LTE predicate on the "model_mode" field.
func ModelModeLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldModelMode, v))
}

// ModelModeIsNil applies the IsNil predicate on the "model_mode" field.
func ModelModeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldModelMode))
}

// ModelModeNotNil applies the NotNil predicate on the "model_mode" field.
func ModelModeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldModelMode))
}

// ModelCriticalEQ applies the EQ predicate on the "model_critical" field.
func ModelCriticalEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldModelCritical, v))
}

// ModelCriticalNEQ applies the NEQ predicate on the "model_critical" field.
func ModelCriticalNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldModelCritical, v))
}

// ModelCriticalIn applies the In predicate on the "model_critical" field.
func ModelCriticalIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldModelCritical, vs...))
}

// ModelCriticalNotIn applies the NotIn predicate on the "model_critical" field.
func ModelCriticalNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldModelCritical, vs...))
}

// ModelCriticalGT applies the GT predicate on the "model_critical" field.
func ModelCriticalGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldModelCritical, v))
}

// ModelCriticalGTE applies the GTE predicate on the "model_critical" field.
func ModelCriticalGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldModelCritical, v))
}

// ModelCriticalLT applies the LT predicate on the "model_critical" field.
func ModelCriticalLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldModelCritical, v))
}

// ModelCriticalLTE applies the LTE predicate on the "model_critical" field.
func ModelCriticalLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldModelCritical, v))
}

// ModelCriticalIsNil applies the IsNil predicate on the "model_critical" field.
func ModelCriticalIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldModelCritical))
}

// ModelCriticalNotNil applies the NotNil predicate on the "model_critical" field.
func ModelCriticalNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldModelCritical))
}

// ModelCriticalDEQ applies the EQ predicate on the "model_critical_d" field.
func ModelCriticalDEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldModelCriticalD, v))
}

// ModelCriticalDNEQ applies the NEQ predicate on the "model_critical_d" field.
func ModelCriticalDNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldModelCriticalD, v))
}

// ModelCriticalDIn applies the In predicate on the "model_critical_d" field.
func ModelCriticalDIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldModelCriticalD, vs...))
}

// ModelCriticalDNotIn applies the NotIn predicate on the "model_critical_d" field.
func ModelCriticalDNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldModelCriticalD, vs...))
}

// ModelCriticalDGT applies the GT predicate on the "model_critical_d" field.
func ModelCriticalDGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldModelCriticalD, v))
}

// ModelCriticalDGTE applies the GTE predicate on the "model_critical_d" field.
func ModelCriticalDGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldModelCriticalD, v))
}

// ModelCriticalDLT applies the LT predicate on the "model_critical_d" field.
func ModelCriticalDLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldModelCriticalD, v))
}

// ModelCriticalDLTE applies the LTE predicate on the "model_critical_d" field.
func ModelCriticalDLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldModelCriticalD, v))
}

// ModelCriticalDIsNil applies the IsNil predicate on the "model_critical_d" field.
func ModelCriticalDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldModelCriticalD))
}

// ModelCriticalDNotNil applies the NotNil predicate on the "model_critical_d" field.
func ModelCriticalDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldModelCriticalD))
}

// GameEQ applies the EQ predicate on the "game" field.
func GameEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGame, v))
}

// GameNEQ applies the NEQ predicate on the "game" field.
func GameNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGame, v))
}

// GameIsNil applies the IsNil predicate on the "game" field.
func GameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldGame))
}

// GameNotNil applies the NotNil predicate on the "game" field.
func GameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldGame))
}

// GameTestEQ applies the EQ predicate on the "game_test" field.
func GameTestEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGameTest, v))
}

// GameTestNEQ applies the NEQ predicate on the "game_test" field.
func GameTestNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGameTest, v))
}

// GameTestIsNil applies the IsNil predicate on the "game_test" field.
func GameTestIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldGameTest))
}

// GameTestNotNil applies the NotNil predicate on the "game_test" field.
func GameTestNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldGameTest))
}

// GameEndEQ applies the EQ predicate on the "game_end" field.
func GameEndEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGameEnd, v))
}

// GameEndNEQ applies the NEQ predicate on the "game_end" field.
func GameEndNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGameEnd, v))
}

// GameEndIsNil applies the IsNil predicate on the "game_end" field.
func GameEndIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldGameEnd))
}

// GameEndNotNil applies the NotNil predicate on the "game_end" field.
func GameEndNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldGameEnd))
}

// GameAccountEQ applies the EQ predicate on the "game_account" field.
func GameAccountEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGameAccount, v))
}

// GameAccountNEQ applies the NEQ predicate on the "game_account" field.
func GameAccountNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGameAccount, v))
}

// GameAccountIsNil applies the IsNil predicate on the "game_account" field.
func GameAccountIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldGameAccount))
}

// GameAccountNotNil applies the NotNil predicate on the "game_account" field.
func GameAccountNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldGameAccount))
}

// GameLvEQ applies the EQ predicate on the "game_lv" field.
func GameLvEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGameLv, v))
}

// GameLvNEQ applies the NEQ predicate on the "game_lv" field.
func GameLvNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGameLv, v))
}

// GameLvIn applies the In predicate on the "game_lv" field.
func GameLvIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldGameLv, vs...))
}

// GameLvNotIn applies the NotIn predicate on the "game_lv" field.
func GameLvNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGameLv, vs...))
}

// GameLvGT applies the GT predicate on the "game_lv" field.
func GameLvGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldGameLv, v))
}

// GameLvGTE applies the GTE predicate on the "game_lv" field.
func GameLvGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldGameLv, v))
}

// GameLvLT applies the LT predicate on the "game_lv" field.
func GameLvLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldGameLv, v))
}

// GameLvLTE applies the LTE predicate on the "game_lv" field.
func GameLvLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldGameLv, v))
}

// GameLvIsNil applies the IsNil predicate on the "game_lv" field.
func GameLvIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldGameLv))
}

// GameLvNotNil applies the NotNil predicate on the "game_lv" field.
func GameLvNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldGameLv))
}

// HasCard applies the HasEdge predicate on the "card" edge.
func HasCard() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CardTable, CardColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCardWith applies the HasEdge predicate on the "card" edge with a given conditions (other predicates).
func HasCardWith(preds ...predicate.Card) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CardTable, CardColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUe applies the HasEdge predicate on the "ue" edge.
func HasUe() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UeTable, UeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUeWith applies the HasEdge predicate on the "ue" edge with a given conditions (other predicates).
func HasUeWith(preds ...predicate.Ue) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UeTable, UeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
