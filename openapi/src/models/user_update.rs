/*
 * Ent Schema API
 *
 * This is an auto generated API description made out of an Ent schema definition
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserUpdate {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "username")]
    pub username: String,
    #[serde(rename = "did", skip_serializing_if = "Option::is_none")]
    pub did: Option<String>,
    #[serde(rename = "member", skip_serializing_if = "Option::is_none")]
    pub member: Option<bool>,
    #[serde(rename = "book", skip_serializing_if = "Option::is_none")]
    pub book: Option<bool>,
    #[serde(rename = "manga", skip_serializing_if = "Option::is_none")]
    pub manga: Option<bool>,
    #[serde(rename = "badge", skip_serializing_if = "Option::is_none")]
    pub badge: Option<bool>,
    #[serde(rename = "bsky", skip_serializing_if = "Option::is_none")]
    pub bsky: Option<bool>,
    #[serde(rename = "mastodon", skip_serializing_if = "Option::is_none")]
    pub mastodon: Option<bool>,
    #[serde(rename = "delete", skip_serializing_if = "Option::is_none")]
    pub delete: Option<bool>,
    #[serde(rename = "handle", skip_serializing_if = "Option::is_none")]
    pub handle: Option<bool>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "raid_at", skip_serializing_if = "Option::is_none")]
    pub raid_at: Option<String>,
    #[serde(rename = "server_at", skip_serializing_if = "Option::is_none")]
    pub server_at: Option<String>,
    #[serde(rename = "egg_at", skip_serializing_if = "Option::is_none")]
    pub egg_at: Option<String>,
    #[serde(rename = "luck", skip_serializing_if = "Option::is_none")]
    pub luck: Option<i32>,
    #[serde(rename = "luck_at", skip_serializing_if = "Option::is_none")]
    pub luck_at: Option<String>,
    #[serde(rename = "like", skip_serializing_if = "Option::is_none")]
    pub like: Option<i32>,
    #[serde(rename = "like_rank", skip_serializing_if = "Option::is_none")]
    pub like_rank: Option<i32>,
    #[serde(rename = "like_at", skip_serializing_if = "Option::is_none")]
    pub like_at: Option<String>,
    #[serde(rename = "fav", skip_serializing_if = "Option::is_none")]
    pub fav: Option<i32>,
    #[serde(rename = "ten", skip_serializing_if = "Option::is_none")]
    pub ten: Option<bool>,
    #[serde(rename = "ten_su", skip_serializing_if = "Option::is_none")]
    pub ten_su: Option<i32>,
    #[serde(rename = "ten_kai", skip_serializing_if = "Option::is_none")]
    pub ten_kai: Option<i32>,
    #[serde(rename = "aiten", skip_serializing_if = "Option::is_none")]
    pub aiten: Option<i32>,
    #[serde(rename = "ten_card", skip_serializing_if = "Option::is_none")]
    pub ten_card: Option<String>,
    #[serde(rename = "ten_delete", skip_serializing_if = "Option::is_none")]
    pub ten_delete: Option<String>,
    #[serde(rename = "ten_post", skip_serializing_if = "Option::is_none")]
    pub ten_post: Option<String>,
    #[serde(rename = "ten_get", skip_serializing_if = "Option::is_none")]
    pub ten_get: Option<String>,
    #[serde(rename = "ten_at", skip_serializing_if = "Option::is_none")]
    pub ten_at: Option<String>,
    #[serde(rename = "next", skip_serializing_if = "Option::is_none")]
    pub next: Option<String>,
    #[serde(rename = "room", skip_serializing_if = "Option::is_none")]
    pub room: Option<i32>,
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<bool>,
    #[serde(rename = "model_at", skip_serializing_if = "Option::is_none")]
    pub model_at: Option<String>,
    #[serde(rename = "model_attack", skip_serializing_if = "Option::is_none")]
    pub model_attack: Option<i32>,
    #[serde(rename = "model_limit", skip_serializing_if = "Option::is_none")]
    pub model_limit: Option<i32>,
    #[serde(rename = "model_skill", skip_serializing_if = "Option::is_none")]
    pub model_skill: Option<i32>,
    #[serde(rename = "model_mode", skip_serializing_if = "Option::is_none")]
    pub model_mode: Option<i32>,
    #[serde(rename = "model_critical", skip_serializing_if = "Option::is_none")]
    pub model_critical: Option<i32>,
    #[serde(rename = "model_critical_d", skip_serializing_if = "Option::is_none")]
    pub model_critical_d: Option<i32>,
    #[serde(rename = "game", skip_serializing_if = "Option::is_none")]
    pub game: Option<bool>,
    #[serde(rename = "game_test", skip_serializing_if = "Option::is_none")]
    pub game_test: Option<bool>,
    #[serde(rename = "game_end", skip_serializing_if = "Option::is_none")]
    pub game_end: Option<bool>,
    #[serde(rename = "game_account", skip_serializing_if = "Option::is_none")]
    pub game_account: Option<bool>,
    #[serde(rename = "game_lv", skip_serializing_if = "Option::is_none")]
    pub game_lv: Option<i32>,
    #[serde(rename = "coin", skip_serializing_if = "Option::is_none")]
    pub coin: Option<i32>,
    #[serde(rename = "coin_open", skip_serializing_if = "Option::is_none")]
    pub coin_open: Option<bool>,
    #[serde(rename = "coin_at", skip_serializing_if = "Option::is_none")]
    pub coin_at: Option<String>,
}

impl UserUpdate {
    pub fn new(id: i32, username: String) -> UserUpdate {
        UserUpdate {
            id,
            username,
            did: None,
            member: None,
            book: None,
            manga: None,
            badge: None,
            bsky: None,
            mastodon: None,
            delete: None,
            handle: None,
            created_at: None,
            updated_at: None,
            raid_at: None,
            server_at: None,
            egg_at: None,
            luck: None,
            luck_at: None,
            like: None,
            like_rank: None,
            like_at: None,
            fav: None,
            ten: None,
            ten_su: None,
            ten_kai: None,
            aiten: None,
            ten_card: None,
            ten_delete: None,
            ten_post: None,
            ten_get: None,
            ten_at: None,
            next: None,
            room: None,
            model: None,
            model_at: None,
            model_attack: None,
            model_limit: None,
            model_skill: None,
            model_mode: None,
            model_critical: None,
            model_critical_d: None,
            game: None,
            game_test: None,
            game_end: None,
            game_account: None,
            game_lv: None,
            coin: None,
            coin_open: None,
            coin_at: None,
        }
    }
}

